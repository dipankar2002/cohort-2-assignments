/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
*/
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
  
const app = express();
app.use(express());
  
app.use(bodyParser.json());

// let todos = [];
async function readFileTodo() {
  let read = fs.readFileSync('todos.json', 'utf-8');
  const parsData = await JSON.parse(read);
  return parsData;
}

const todoCheck = async (obj) => {
  let flag = false;
  let todos = await readFileTodo();
  if(todos.length === 0) {
    return flag;
  }
  await todos.forEach((val) => {
    if(val.id === obj.id) {
      flag = true;
      return flag;
    }
  })
  return flag;
}
const findTodo = async (id) => {
  let response = false;
  let todos = await readFileTodo();
  if(todos.length === 0) {
    return response;
  }
  todos.forEach((val) => {
    if(val.id == id) {
      response = val;
      return response;
    }
  })
  return response;
}
const updateTodo = async (id,newObj) => {
  let response = false;
  let todos = await readFileTodo();
  if(todos.length === 0) {
    return response;
  }
  todos.forEach((val) => {
    if(val.id == id) {
      val.title = newObj.title;
      val.completed = newObj.completed;
      val.description = newObj.description;
      response = true;
    }
  })
  const data = await JSON.stringify(todos);
  fs.writeFile('todos.json', data, (err) => {
    if (err) throw err;
  })
  return response;
}
const deleteTodo = async (id) => {
  let response = false;
  let todos = await readFileTodo();
  todos.forEach((val,index) => {
    if (val.id == id){
      todos.splice(index, 1);
      response = true;
    }
  })
  const data = await JSON.stringify(todos);
  fs.writeFile('todos.json', data, (err) => {
    if (err) throw err;
  })
  return response;
}

app.delete('/todos/:id', (req,res) => {
  const id = req.params.id;

  const del = deleteTodo(id);
  if(del) {
    res.status(200).json({
      msg: `Todo id:${id} deleted`,
    });
  }
  res.status(404).json({
    msg: 'Not Found',
  })
})
app.put('/todos/:id', (req,res) => {
  const title = req.body.title;
  const compi = req.body.completed;
  const desc = req.body.description;
  const id = req.params.id;

  const newObj = {
    id: id,
    title: title,
    completed: compi,
    description: desc,
  }

  const update = updateTodo(id,newObj);
  if(update) {
    res.status(200).json({
      msg: `Todo id:${id} updated`,
    });
  }
  res.status(404).json({
    msg: 'Not Found',
  })
})
app.post('/todos', async (req,res) => {
  const title = req.body.title;
  const compi = req.body.completed;
  const desc = req.body.description;
  const id = Math.floor((Math.random() * 100) + 1);

  let todos = await readFileTodo();

  const obj = {
    id: id,
    title: title,
    completed: compi,
    description: desc,
  }

  if(todoCheck(obj)) {
    res.status(404).json({
      msg: 'todo already exits',
    })
  } else {
    todos.push(obj);
    const data = await JSON.stringify(todos);
    fs.writeFile('todos.json', data, (err) => {
      if (err) throw err;
    })
    res.status(200).json({id: id});
  }
})
app.get('/todos/:id', (req,res) => {
  const id = req.params.id;

  const ifTodo = findTodo(id);
  if(ifTodo) {
    res.status(200).json(ifTodo);
  } else {
    res.status(404).json({
      msg: 'Not Found',
    });
  }
})
app.get('/todos', (req,res) => {
  const data = readFileTodo();
  res.status(200).json(data);
})
app.listen(3000,() => {
  console.log(`server start`);  
})
  
module.exports = app;